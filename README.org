#+TITLE: My notes on Data Structures and Algorithms
* Table of Contents                                                   :toc_3:
- [[#background][Background]]
- [[#big-o-notation][Big O Notation]]
  - [[#time-complexity][Time Complexity]]
  - [[#spatial-complexity][Spatial Complexity]]
- [[#data-structures][Data Structures]]
  - [[#arrays-staticdynamic][Arrays (Static/Dynamic)]]
    - [[#strengths][Strengths]]
    - [[#weaknesses][Weaknesses]]
    - [[#implementation][Implementation]]
  - [[#linked-lists-single-vs-double][Linked Lists (Single vs Double)]]
    - [[#strengths-1][Strengths]]
    - [[#weaknesses-1][Weaknesses]]
    - [[#uses][Uses:]]
    - [[#code][Code]]
  - [[#stacks][Stacks]]
  - [[#queues][Queues]]
  - [[#trees][Trees]]
  - [[#graphs][Graphs]]
- [[#algorithms][Algorithms]]
  - [[#searching][Searching]]
  - [[#sorting][Sorting]]
  - [[#hashing][Hashing]]
  - [[#greedy][Greedy]]
  - [[#recursion][Recursion]]
  - [[#backtracking][Backtracking]]
  - [[#dynamic-programming][Dynamic Programming]]
  - [[#advanced-algorithms][Advanced Algorithms]]

* Background
As a 3rd year student who took Data Structures and Algorithms his second year,
I'm going to be honest and say that I pretty much forgot most of it.
These notes are meant to help me re-learn the core-concepts so that I'm not rushing at the last minute.
Moreover, these concepts are just generally important SWE skills I need to touch up on again.

* TODO Big O Notation
** TODO Time Complexity
** TODO Spatial Complexity
* Data Structures
** TODO Arrays (Static/Dynamic)
|        | Static Worst Case | Dynamic Worst Case |
|--------+-------------------+--------------------|
| Space  | O(n)              | O(n)               |
| Lookup | O(1)              | O(1)               |
| Append | O(1)              | O(n)               |
| Insert | O(n)              | O(n)               |
| Delete | O(n)              | O(n)               |
*** Strengths
- Fast lookups: Given an index, it will always have constant time
- Fast appends: Appending is constant, if theres space available
*** Weaknesses
- Fixed size: Need to specify how many elements are going to be used (if static)
- Costly inserts and delete: Since elements are stored sequentially, if you pop an element from the middle, it has to scoot over the rest
- /For dynamic/: If the array currently fits in memory spaces [1..5] but you need space for 6 elements, it has to search for a new spot in memory to reallocate the array
*** Implementation
Python's arrays are dynamic, so its as simple as ~arr = []~.
** TODO Linked Lists (Single vs Double)
|         | Worst Case |
|---------+------------|
| Space   | O(n)       |
| Prepend | O(1)       |
| Append  | O(1)       |
| Lookup  | O(n)       |
| Insert  | O(n)       |
| Delete  | O(n)       |

 A linked list is similar to an array in that it stores elements sequentially; however, elements are tied together through pointers in memory.
 The image below shows the concept behind a singly-linked list, where each ~Node~ points to a ~Node~ that follows it.
#+DOWNLOADED: file:/var/folders/09/vhzk9_lj38l4m_31zf_3zdfw0000gn/T/TemporaryItems/NSIRD_screencaptureui_FDEfHW/Screen Shot 2023-01-02 at 12.36.26 PM.png @ 2023-01-02 12:36:29
[[file:Data_Structures/2023-01-02_12-36-29_Screen Shot 2023-01-02 at 12.36.26 PM.png]]

A double-linked list is where each node points to a ~previous~ and ~next~ ~Node~. A visual can be seen below:
#+DOWNLOADED: file:/var/folders/09/vhzk9_lj38l4m_31zf_3zdfw0000gn/T/TemporaryItems/NSIRD_screencaptureui_HWddgo/Screen Shot 2023-01-02 at 2.50.45 PM.png @ 2023-01-02 14:50:47
[[file:Data_Structures/2023-01-02_14-50-47_Screen Shot 2023-01-02 at 2.50.45 PM.png]]

When you should use a single linked list vs a double linked list:
| Singly Linked                     | Double Linked                 |
|-----------------------------------+-------------------------------|
| When there is a memory limitation | There's no memory limitation  |
| Searching not important           | Searching is important        |
| Can only traverse forward         | Can traverse forward/backward |
*** Strengths
- Fast operations on either ends: Adding/removing at either end takes constant time
- Flexible size: Does not have same /sequential/ storage constraints as arrays, is only limited by machine's storage.
*** Weaknesses
- Costly lookups: You have to walk through ~n~ elements to find the node you're looking for
- The costly lookups make linked lists /not/ [[https://www.interviewcake.com/article/data-structures-coding-interview#ram][cache-friendly]] 
*** Uses:
[[Stacks]] and [[Queues]] are an ideal data structure to use linked lists in, since they only need fast operations on the ends.
*** Code
Below is an implementation of a singly-linked list. A double-linked list uses the same concepts, so it isn't included.

#+begin_src python :results output
  class Node:
      def __init__(self, val=None, next_node=None, prev_node=None):
          """Note, this defintintion of a node covers both single and double linking"""
          self.val = val
          self.next_node = next_node
          self.prev_node = prev_node

  class SinglyLinkedList:
      def __init__(self):
          # head --> values ... --> tail
          self.head = None
          self.tail = None

      def append(self, val):
          if self.head is None:   # Case where linked list is empty, so it needs to set both head/tail
              self.tail = self.head = Node(val)  
          else:
              self.tail.next_node = Node(val) # Points current tail's next node to new instance of Node
              self.tail = self.tail.next_node # Sets new tail to be the newly created Node
          return self.tail

      def prepend(self, val):
          if self.head is None:   # Case where linked list is empty, so it needs to set both head/tail
              self.tail = self.head = Node(val)  
          else:
              current_head = self.head # Gets the old head and saves it temporarily
              self.head = Node(val, next_node=current_head) # Creates new node with next node point to old head

      def search(self, val) -> bool:
          curr = self.head
          while curr:
              if curr.val == val:
                  return True
              curr = curr.next_node
          return False

      def insert(self, val, target_idx):
          if target_idx > self.__len__()-1:
              return

          curr = self.head
          idx_count = 0
          while curr:
              if idx_count == target_idx - 1:
                  new_node = Node(val) # Instantiates new node
                  new_node.next_node = curr.next_node # sets new node next to remaining linked list, relative to current node
                  curr.next_node = new_node           # sets current nodes next node to new node (which has rest of list)
                  return

              idx_count += 1
              curr = curr.next_node

      def delete(self, val):
          prev = self.head        # Will always trail one behind
          curr = self.head.next_node  

          while curr:
              if curr.val == val:
                  prev.next_node = curr.next_node
                  return 

              prev = prev.next_node
              curr = curr.next_node

      def print_values(self):     # Basically traversal
          curr = self.head
          while curr:
              print(curr.val, end=" ")
              curr = curr.next_node
          print()

      def __len__(self):
          count = 0
          curr = self.head
          while curr:
              count += 1
              curr = curr.next_node
          return count

  if __name__ == "__main__":
      singly_linked_list = SinglyLinkedList()

      print("Appending 1 and 3 to empty linked list:", end=" ") 
      singly_linked_list.append(1)
      singly_linked_list.append(3)
      singly_linked_list.print_values()

      print("Prepending 0 to existing linked list:", end=" ") 
      singly_linked_list.prepend(0)
      singly_linked_list.print_values()

      print("Len of singly linked list:", singly_linked_list.__len__())

      print("Inserting val=2 to second 'idx':", end=" ")
      singly_linked_list.insert(val=2, target_idx=2)
      singly_linked_list.print_values()
      print("Len of singly linked list:", singly_linked_list.__len__())

      print("Deleting 1 from linked list:", end=" ")
      singly_linked_list.delete(1)
      singly_linked_list.print_values()
      print("Len of singly linked list:", singly_linked_list.__len__())
#+end_src

#+RESULTS:
: Appending 1 and 3 to empty linked list: 1 3 
: Prepending 0 to existing linked list: 0 1 3 
: Len of singly linked list: 3
: Inserting val=2 to second 'idx': 0 1 2 3 
: Len of singly linked list: 4
: Deleting 1 from linked list: 0 2 3 
: Len of singly linked list: 3

** TODO Stacks
** TODO Queues
** TODO Trees
** TODO Graphs
* Algorithms
** TODO Searching
** TODO Sorting
** TODO Hashing
** TODO Greedy
** TODO Recursion
** TODO Backtracking
** TODO Dynamic Programming
** TODO Advanced Algorithms
